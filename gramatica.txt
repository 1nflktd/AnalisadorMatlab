INICIO -> COMANDO
COMANDO -> COMANDO COMANDO
COMANDO -> COMANDO;
COMANDO -> ATRIB
COMANDO -> FOR
COMANDO -> WHILE
COMANDO -> SWITCH
COMANDO -> IF
COMANDO -> TRY
COMANDO -> PARFOR
COMANDO -> CRIAFUNCTION
COMANDO -> FUNCTION
COMANDO -> break
COMANDO -> continue
COMANDO -> return
COMANDO -> return VAL
COMANDO -> COMENTARIO
COMP0 -> COMP0 || COMP1
COMP1 -> COMP1 && COMP2
COMP2 -> ~COMP3
COMP3 -> EXP1 > EXP1
COMP3 -> EXP1 >= EXP1
COMP3 -> EXP1 < EXP1
COMP3 -> EXP1 <= EXP1
COMP3 -> EXP1 == EXP1
COMP3 -> EXP1 ~= EXP1
COMP0 -> COMP1
COMP1 -> COMP2
COMP2 -> COMP3
COMP3 -> (COMP0)
EXP0 -> COMP0
EXP1 -> EXP1 + EXP2
EXP2 -> EXP2 - EXP3
EXP3 -> EXP3 | EXP4
EXP4 -> EXP4 * EXP5
EXP5 -> EXP5 / EXP6
EXP6 -> EXP7 .^ EXP6
EXP7 -> -EXPFIM
EXP0 -> EXP1
EXP1 -> EXP2
EXP2 -> EXP3
EXP3 -> EXP4
EXP4 -> EXP5
EXP5 -> EXP6
EXP6 -> EXP7
EXP7 -> EXPFIM
EXPFIM -> id
EXPFIM -> cte
EXPFIM -> (EXP1)
ATRIB -> id = VAL
VAL -> id
VAL -> cte
VAL -> EXP0
VAL -> FUNCTION
FOR -> for (ATRIB; COMP0; ATRIB) COMANDO end
WHILE -> while (COMP0) COMANDO end
TRY -> try COMANDO catch COMANDO end
COMENTARIO -> % string \n
COMENTARIO -> %{ string }%
IF -> if (COMP0) COMANDO ELSE end
ELSE -> else COMANDO
ELSE -> elseif (COMP0) COMANDO ELSE
ELSE -> elseif (COMP0) COMANDO
PARAM0 -> PARAM0,
PARAM0 -> PARAM1
PARAM1 -> VAL
CRIAFUNCTION -> function FUNCTION COMANDO end
FUNCTION -> id(PARAM0)
SWITCH -> switch id CASE end
CASE -> case cte COMANDO CASE
CASE -> case cte COMANDO
CASE -> otherwise COMANDO
PARFOR -> ATRIB : VAL; COMANDO; end
